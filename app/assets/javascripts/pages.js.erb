$(document).ready(function(){

  L.mapbox.accessToken = '<%= ENV['MAPBOX_KEY'] %>';
  getMarkerData();
  mapClick();

});

var mapClick = function(){
  $('#map').on('click', function(){
    $('#chart-container').hide();
    $('.sidebar-right').css('display', 'none');
    $('.mini-submenu-right').css('display', 'none');
  });
}

var getMarkerData = function(){
  var map = L.mapbox.map('map', 'mapbox.dark', { zoomControl: false }).setView([39.114102, -94.627478], 4);
  new L.Control.Zoom({ position: 'bottomright' }).addTo(map);

  $.get('/data', 'json').done(function(data){
    var markers = new L.MarkerClusterGroup();

    for (var i = 0; i < data.length; i ++) {
    var d = data[i];
    var content = '<h2><a href="http://www.google.com">'+ d.city + '</a></h2><p>'+ d.temp +'</p>';
    if (d.temp >= 92.5) {
      var marker = L.marker(new L.LatLng(d.latitude, d.longitude),{
        icon: L.mapbox.marker.icon({'marker-color': 'FF6666', 'marker-symbol': 'fire-station'}),
        content: content,
        city: d.city,
        state: d.state,
        temp: d.temp
      });
    } else {
      var marker = L.marker(new L.LatLng(d.latitude, d.longitude),{

        icon: L.mapbox.marker.icon({'marker-color': '#99cfe0'}),
        content: content,
        city: d.city,
        state: d.state,
        temp: d.temp
      });
    };
    // marker.bindPopup(content);
    marker.on('click', function(e){
      $('.sidebar-right').css('display', 'none');
      $('.mini-submenu-right').css('display', 'none');
      map.panTo([e.latlng.lat, e.latlng.lng]);
      displayChart(this.options.city, this.options.state);
    })
    markers.addLayer(marker);
    $('#loading').hide();
  }
    map.addLayer(markers);
  })
};

var displayChart = function(clickedCity, clickedState){

    var cityName = clickedCity;
    var stateName = clickedState;
    var timeFrame = 7;

    $.ajax({
        method: "GET",
        url: "http://localhost:3000/find?city=" + cityName + "&state=" + stateName + "&timeframe=" + timeFrame,
        dataType: 'JSON'
    })
    .done(function(response){
        //Chart Data
      var chartData = response;

      var todayDate = new Date();
      var dates = [];
      for (i=1; i <= timeFrame; i++){
          var newDate = new Date();
          newDate.setDate(todayDate.getDate() - (timeFrame - i));
          dates.push(newDate.toJSON().slice(0,10));
      }

      var avgTemps = [];
      dates.forEach(function(date){
          var dayTemps = chartData.filter(function(data){
              return (data["time"].slice(0,10) === date);
          })
          var sum = Object.keys(dayTemps).reduce(function(a, b){
              return a + dayTemps[b].temp;
          }, 0)
          if (sum === 0) {
              avgTemps.push(null);
          } else {
              avgTemps.push(sum/dayTemps.length);
          }
      })

      $('#chart-container').highcharts({
          chart: {
              type: 'line'
          },
          title: {
              text: cityName
          },
          xAxis: {
              categories: dates
          },
          yAxis: {
              title: {
                  text: 'Temperature'
              }
          },
          series: [
          {
              name: cityName + " Average",
              data: avgTemps
          }]

      });
      $('#chart-container').show();

      $('#chart-container').append('<a href="#" id="7">1-week </a><a href="#" id="14">2-weeks </a><a href="#" id="30">1-month</a>');
    })

    //trigger for interactive chart
    $('#chart-container').on('click', 'a', function(e){
        e.preventDefault();
        timeFrame = $(e.target).attr('id')
        $.ajax({
            method: "GET",
            url: "http://localhost:3000/find?city=" + cityName + "&state=" + stateName + "&timeframe=" + timeFrame,
            dataType: 'JSON'
        })
        .done(function(response){
            var chartData = response;

            var todayDate = new Date();
            var dates = [];
            for (i=1; i <= timeFrame; i++){
                var newDate = new Date();
                newDate.setDate(todayDate.getDate() - (timeFrame - i));
                dates.push(newDate.toJSON().slice(0,10));
            }

            var avgTemps = [];
            dates.forEach(function(date){
                var dayTemps = chartData.filter(function(data){
                    return (data["time"].slice(0,10) === date);
                })
                var sum = Object.keys(dayTemps).reduce(function(a, b){
                    return a + dayTemps[b].temp;
                }, 0)
                if (sum === 0) {
                    avgTemps.push(null);
                } else {
                    avgTemps.push(sum/dayTemps.length);
                }
            })

            $('#chart-container').highcharts({
                chart: {
                    type: 'line'
                },
                title: {
                    text: cityName
                },
                xAxis: {
                    categories: dates
                },
                yAxis: {
                    title: {
                        text: 'Temperature'
                    }
                },
                series: [{
                    name: cityName + " Average",
                    data: avgTemps
                }]

            });
        $('#chart-container').show();

        $('#chart-container').append('<a href="#" id="7">1-week </a><a href="#" id="14">2-weeks </a><a href="#" id="30">1-month</a>');
      });
    })
}

