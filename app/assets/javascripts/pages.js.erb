$(document).ready(function(){

  L.mapbox.accessToken = '<%= ENV['MAPBOX_KEY'] %>';
  getMarkerData();
  bindListeners();
  $('#loading').hide();
  // displayTestCharts("San Francisco", "California");
});

String.prototype.capitalize = function(){
    return this.toLowerCase().replace( /\b\w/g, function (m) {
        return m.toUpperCase();
    });
};


var bindListeners = function(){
  $('#search-box').on('submit', searchBoxSubmit);
  $('#map').on('click', mapClick);
  $('.navbar-brand').on('click', showSidebar);
  $('.main-search').on('submit', 'form', searchBoxSubmit);
  $('.landing-link').on('click', hideLandingPage);
}

var hideLandingPage = function(){
    $('.overlay').fadeOut('slow');
    $('.landing-row').fadeOut('slow');
    $('.map-search').fadeIn('slow');
}

var searchBoxSubmit = function(e){
  e.preventDefault();
  hideLandingPage();
  var searchInput = this.elements[0].value;
  var cityInput = searchInput.match(/^([a-zA-Z\s]+?),/);
  var stateInput = searchInput.match(/, ?(\w+\ ?\w+)/);
  if (stateInput[1].length === 2){
    if (convertState(stateInput[1])){
      stateInput[1] = convertState(stateInput[1]);
    }
  }
  if (cityInput === null || stateInput === null) {
    displaySearchError();
  } else {
    $.ajax({
      method: 'GET',
      url: "/find_city?city=" + cityInput[1].capitalize() + "&state=" + stateInput[1].capitalize(),
      dataType: 'json'
    }).done(function(response){
      displayChart(cityInput[1].capitalize(), stateInput[1].capitalize());
      $('#search-box').trigger('reset');
    }).fail(function(response){
      displaySearchError();
    })
  }
}

var displaySearchError = function(){
  $('.search-error').show();
  $('.search-error').fadeOut(4000);
}

var mapClick = function(){
  $('#chart-container').fadeOut('slow');
  // hideSidebar();
}

var hideSidebar = function(){
  $('.sidebar-right').hide();
  $('.mini-submenu-right').hide();
}

var showSidebar = function(){
  $('.sidebar-right').show();
  $('.mini-submenu-right').show();
}

var getMarkerData = function(){
  var map = L.mapbox.map('map', 'mapbox.streets', { zoomControl: false, minZoom: 4 }).setView([39.114102, -94.627478], 4);

  new L.Control.Zoom({ position: 'bottomright' }).addTo(map);

  $.get('/data', 'json').done(function(data){
    var markers = new L.MarkerClusterGroup();

    for (var i = 0; i < data.length; i ++) {
    var d = data[i];
    var content = '<h2><a href="http://www.google.com">'+ d.city + '</a></h2><p>'+ d.temp +'</p>';
    if (d.temp > 99.5) {
      var marker = L.marker(new L.LatLng(d.latitude, d.longitude),{
        icon: L.mapbox.marker.icon({'marker-color': 'FF6666', 'marker-symbol': 'fire-station'}),
        content: content,
        city: d.city,
        state: d.state,
        temp: d.temp
      });
    } else {
      var marker = L.marker(new L.LatLng(d.latitude, d.longitude),{

        icon: L.mapbox.marker.icon({'marker-color': '#2e37fe'}),
        content: content,
        city: d.city,
        state: d.state,
        temp: d.temp
      });
    };
    // marker.bindPopup(content);
    marker.on('click', function(e){
      map.panTo([e.latlng.lat, e.latlng.lng]);
      displaySideChart(this.options.city, this.options.state);

      $('.mini-submenu-right').css('display', "none");
      // $('#accordion-right').css('display', null);
    })
    markers.addLayer(marker);
  }
    map.addLayer(markers);
  })
};

var displayLineChart = function(cityName, stateName, dates, avgTemps){

    var timeFrame = 7;

      $('#chart-container').highcharts({
         chart: {
              type: 'line',
            marginTop: 50,
            marginBottom: 50,
          },

        tooltip: {
            enabled: true
        },


        legend: {
            enabled: true
        },


          title: {
              text: "Average Human Temperatures Detected in " + cityName
          },
          xAxis: {
              categories: dates,
              title: "Dates",
              dataLabels: {
              enabled: true
            }
          },
          yAxis: {
              title: {
              text: "Temperatures"
              },

          labels: {
              enabled: true
            }
          },
          series: [
          {
              name: "Average Temperatures",
              data: avgTemps,
              dataLabels: {
                enabled: false,
                color: '#000000'
        },
          }]
      });
      $('#chart-container').show();

      $('#chart-container').append('<a href="#" id="7">1-week </a><a href="#" id="14">2-weeks </a><a href="#" id="30">1-month</a>');

    //trigger for interactive chart
    $('#chart-container').on('click', 'a', function(e){
        e.preventDefault();
        timeFrame = $(e.target).attr('id')
        $.ajax({
            method: "GET",
            url: "/find?city=" + cityName + "&state=" + stateName + "&timeframe=" + timeFrame,
            dataType: 'JSON'
        })
        .done(function(response){
            var chartData = response;

            var todayDate = new Date();
            var dates = [];
            for (i=1; i <= timeFrame; i++){
                var newDate = new Date();
                newDate.setDate(todayDate.getDate() - (timeFrame - i));
                dates.push(newDate.toJSON().slice(0,10));
            }

            var avgTemps = [];
            dates.forEach(function(date){
                var dayTemps = chartData.filter(function(data){
                    return (data["time"].slice(0,10) === date);
                })
                var sum = Object.keys(dayTemps).reduce(function(a, b){
                    return a + dayTemps[b].temp;
                }, 0)
                if (sum === 0) {
                    avgTemps.push(null);
                } else {
                    avgTemps.push(sum/dayTemps.length);
                }
            })
            $('#chart-container').highcharts({
          chart: {
              type: 'line',
            marginTop: 50,
            marginBottom: 50,
          },

        tooltip: {
            enabled: true
        },


        legend: {
            enabled: true
        },


          title: {
              text: "Average Human Temperatures Detected in " + cityName
          },
          xAxis: {
              categories: dates,
              title: "Dates",
              dataLabels: {
              enabled: true
            }
          },
          yAxis: {
              title: {
              text: "Temperatures"
              },

          labels: {
              enabled: true
            }
          },
          series: [
          {
              name: "Average Temperatures",
              data: avgTemps,
              dataLabels: {
                enabled: false,
                color: '#000000'
        },
                }]

            });
        $('#chart-container').show();

        $('#chart-container').append('<a href="#" id="7">1-week </a><a href="#" id="14">2-weeks </a><a href="#" id="30">1-month</a>');
      });
    })



}

var displayHeatMap = function(dates, heatMapData, cityName){
    $('#chart-container').highcharts({

        chart: {
            type: 'heatmap',
            marginTop: 40,
            marginBottom: 80,
            plotBorderWidth: 1
        },


        title: {
            text: 'Temperature data by day for ' + cityName
        },

        yAxis: {
            categories: ['<95 (Hypothermia)', '95-97.69 (Below Average)', '97.7-98.5 (Normal)', '98.5-99.5 (Normal)', '99.5-100.9 (Hyperthermia/Fever)', '100.9 - 104 (Severe Hyperthermia)', '>104 (Hyperpyrexia)']
        },

        xAxis: {
            categories: dates,
            title: null
        },

        colorAxis: {
            min: 0,
            minColor: '#FFFFFF',
            maxColor: Highcharts.getOptions().colors[0]
        },

        legend: {
            align: 'right',
            layout: 'vertical',
            margin: 0,
            verticalAlign: 'top',
            y: 25,
            symbolHeight: 280
        },

        tooltip: {
            formatter: function () {
                return 'On <b>' + this.series.xAxis.categories[this.point.x] + '</b>, <b>' +
                    this.point.value + '</b> people registered between <br><b>' + this.series.yAxis.categories[this.point.y];
            }
        },

        series: [{
            name: 'Temperature by count',
            borderWidth: 1,
            data: heatMapData,
            // data: testHeatData,
            dataLabels: {
                enabled: true,
                color: '#000000'
            }
        }]

    });


}

// var displayLineChart = function(avgHumidity, avgTemps, dates, cityName, stateName){
//     var charts = [],
//     options;

//     function syncTooltip(container, p) {
//         var i = 0;
//         for (; i < charts.length; i++) {
//             if (container.id != charts[i].container.id) {
//                 if(charts[i].tooltip.shared) {
//                     charts[i].tooltip.refresh([charts[i].series[0].data[p]]);
//                 }
//                 else {
//                     charts[i].tooltip.refresh(charts[i].series[0].data[p]);
//                 }
//             }
//         }
//     }

//     options = {
//         plotOptions: {
//             series: {
//                 point: {
//                     events: {
//                         mouseOver: function () {
//                             syncTooltip(this.series.chart.container, this.x);
//                         }
//                     }
//                 }
//             }
//         },

//     };

//     charts[0] = new Highcharts.Chart($.extend(true, {}, options, {
//         chart: {
//             renderTo: 'line-chart-top'
//         },
//         tooltip: {
//             shared: true,
//             valueDecimals: 2
//         },
//         title: {
//           text: cityName + ", " + stateName
//         },
//         series: [{
//             data: avgTemps,
//             name: "Temperature"
//         }],
//         xAxis: {
//             categories: dates,
//             labels: { enabled: false }
//         },
//         yAxis: {
//           title: {
//               text: 'Temperature'
//           }
//         },
//         legend: {
//             enabled: false
//         }
//     }));


//     charts[1] = new Highcharts.Chart($.extend(true, {}, options, {
//         chart: {
//             renderTo: 'line-chart-bottom'
//         },
//         tooltip: {
//             shared: false
//         },
//         title: {
//             text: ''
//         },
//         series: [{
//             data: avgHumidity,
//             name: "Humidity",
//             color: 'green'
//         }],
//         xAxis: {
//             categories: dates
//         },
//         yAxis: {
//           title: {
//               text: 'Humidity'
//           }
//         },
//         legend: {
//             enabled: false
//         }
//     }));

// }

STATES = {"AK" : "Alaska",
      "AL" : "Alabama",
      "AR" : "Arkansas",
      "AZ" : "Arizona",
      "CA" : "California",
      "CO" : "Colorado",
      "CT" : "Connecticut",
      "DE" : "Delaware",
      "FL" : "Florida",
      "GA" : "Georgia",
      "HI" : "Hawaii",
      "IA" : "Iowa",
      "ID" : "Idaho",
      "IL" : "Illinois",
      "IN" : "Indiana",
      "KS" : "Kansas",
      "KY" : "Kentucky",
      "LA" : "Louisiana",
      "MA" : "Massachusetts",
      "MD" : "Maryland",
      "ME" : "Maine",
      "MI" : "Michigan",
      "MN" : "Minnesota",
      "MO" : "Missouri",
      "MS" : "Mississippi",
      "MT" : "Montana",
      "NC" : "North Carolina",
      "ND" : "North Dakota",
      "NE" : "Nebraska",
      "NH" : "New Hampshire",
      "NJ" : "New Jersey",
      "NM" : "New Mexico",
      "NV" : "Nevada",
      "NY" : "New York",
      "OH" : "Ohio",
      "OK" : "Oklahoma",
      "OR" : "Oregon",
      "PA" : "Pennsylvania",
      "RI" : "Rhode Island",
      "SC" : "South Carolina",
      "SD" : "South Dakota",
      "TN" : "Tennessee",
      "TX" : "Texas",
      "UT" : "Utah",
      "VA" : "Virginia",
      "VT" : "Vermont",
      "WA" : "Washington",
      "WI" : "Wisconsin",
      "WV" : "West Virginia",
      "WY" : "Wyoming"}

var convertState = function(s) {
  return STATES[s.toUpperCase()]
}
